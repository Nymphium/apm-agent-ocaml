---
version: '2.2'
services:
  apm-server:
    image: docker.elastic.co/apm/apm-server:7.15.1
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
    cap_drop: ["ALL"]
    ports:
    - 8200:8200
    networks:
    - elastic
    command: >
       apm-server -e
         -E apm-server.rum.enabled=true
         -E setup.kibana.host=kibana:5601
         -E setup.template.settings.index.number_of_replicas=0
         -E apm-server.kibana.enabled=true
         -E apm-server.kibana.host=kibana:5601
         -E output.elasticsearch.hosts=["elasticsearch:9200"]
    healthcheck:
      interval: 10s
      retries: 12
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.1
    environment:
    - bootstrap.memory_lock=true
    - cluster.name=docker-cluster
    - cluster.routing.allocation.disk.threshold_enabled=false
    - discovery.type=single-node
    - ES_JAVA_OPTS=-XX:UseAVX=2 -Xms1g -Xmx1g
    ulimits:
      memlock:
        hard: -1
        soft: -1
    volumes:
    - esdata:/usr/share/elasticsearch/data
    ports:
    - 9200:9200
    networks:
    - elastic
    healthcheck:
      interval: 20s
      retries: 10
      test: curl -s http://localhost:9200/_cluster/health | grep -vq '"status":"red"'

  kibana:
    image: docker.elastic.co/kibana/kibana:7.15.1
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
    - 5601:5601
    networks:
    - elastic
    healthcheck:
      interval: 10s
      retries: 20
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:5601/api/status

  ocaml-base:
    image: ocaml-base:latest
    build:
      context: .
      dockerfile: ocaml-base.Dockerfile

  reverse-string-example:
    image: reverse-string-ocaml
    build:
      context: .
      dockerfile: example/1-hello-opium/Dockerfile
    environment:
      port: 4000
    expose:
      - 4000
    ports:
      - 4000:4000
    depends_on:
      apm-server:
        condition: service_healthy

  polyglot-example-ocaml:
    image: polyglot-example-ocaml
    build:
      context: .
      dockerfile: example/3-polyglot-services/ocaml/Dockerfile
    environment:
      port: 4001
    expose:
      - 4001
    ports:
      - 4001:4001
    depends_on:
      apm-server:
        condition: service_healthy

  polyglot-example-python:
    image: polyglot-example-python
    build:
      context: .
      dockerfile: example/3-polyglot-services/python/Dockerfile
    expose:
      - 4002
    ports:
      - 4002:5000
    depends_on:
      apm-server:
        condition: service_healthy

  test-postgres:
    image: postgres
    container_name: test-postgres
    environment:
      - POSTGRES_USER=ocaml_demo
      - POSTGRES_DB=ocaml_demo
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./postgres_init.sql:/docker-entrypoint-initdb.d/postgres_init.sql

  database-example-ocaml:
    image: database-example-ocaml
    build:
      context: .
      dockerfile: example/2-database-ocaml/Dockerfile
    environment:
      port: 4003
    expose:
      - 4003
    ports:
      - 4003:4003
    depends_on:
      apm-server:
        condition: service_healthy
      test-postgres:
        condition: service_healthy

volumes:
  esdata:
    driver: local

networks:
  elastic:
    driver: bridge
